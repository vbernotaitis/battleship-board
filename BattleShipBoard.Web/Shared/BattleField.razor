@using BattleShipBoard.Engine
@using BattleShipBoard.Interfaces

<table class="table-bordered table-dark">
    @for (var y = -1; y < Size; y++)
    {
        <tr>
            @for (var x = -1; x < Size; x++)
            {
                @if (y == -1 && x == -1)
                {
                    <th></th>
                }
                else if (y == -1)
                {
                    <th>@_letters[x].ToUpper()</th>
                }
                else if (x == -1)
                {
                    <th>@(y+1)</th>
                }
                else
                {
                    <td class="@GetFieldStateClass(x, y)">
                        @if (LastShot?.X == y && LastShot?.Y == x)
                        {
                            <div class="spinner-grow spinner-grow-sm text-dark" role="status">
                                <span class="sr-only">Loading...</span>
                            </div>
                        }
                    </td>
                }

            }
        </tr>
    }
</table>

@code {
    [Parameter] public int Size { get; set; } = 10;
    [Parameter] public Field[][] Fields { get; set; }
    [Parameter] public Coordinates LastShot { get; set; }
    readonly string[] _letters = { "a", "b", "c", "d", "e", "f", "g", "h", "i", "j" };

    string GetFieldStateClass(int x, int y)
    {
        string state = "table-light";
        if (Fields != null && Fields.Length >= y && Fields[y].Length >= x)
        {
            switch (Fields[y][x].State)
            {
                case FieldState.Ship:
                    state = "bg-primary";
                    break;
                case FieldState.Miss:
                    state = "table-secondary";
                    break;
                case FieldState.Hit:
                    state = "table-danger";
                    break;
                case FieldState.Empty:
                default:
                    state = "table-light";
                    break;
            }
        }

        return state;
    }
}